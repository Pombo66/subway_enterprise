generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Order[]
}

model Store {
  id        String   @id @default(uuid())
  name      String

  // NEW
  country   String?         // e.g. "GB", "FR" or full name if you prefer
  region    String?         // e.g. "EMEA", "AMER", "APAC"
  @@index([country])
  @@index([region])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Order[]
  MenuItems MenuItem[]
}

model MenuItem {
  id        String   @id @default(cuid())
  storeId   String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  active    Boolean  @default(true)
  Store     Store    @relation(fields: [storeId], references: [id])
  modifiers MenuItemModifier[]
  
  @@index([storeId])
  @@index([active])
  @@index([storeId, active])
}

model Order {
  id        String      @id @default(cuid())
  storeId   String
  userId    String?
  total     Decimal
  status    OrderStatus @default(PAID)
  createdAt DateTime    @default(now())
  Store     Store       @relation(fields: [storeId], references: [id])
  User      User?       @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PAID
  PENDING
  CANCELLED
}

model ModifierGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  menuItems   MenuItemModifier[]
  
  @@index([active])
}

model MenuItemModifier {
  id              String        @id @default(cuid())
  menuItemId      String
  modifierGroupId String
  createdAt       DateTime      @default(now())
  
  // Relations
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  
  @@unique([menuItemId, modifierGroupId])
  @@index([menuItemId])
  @@index([modifierGroupId])
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique
  enabled     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([key])
  @@index([enabled])
}

model TelemetryEvent {
  id         String   @id @default(cuid())
  eventType  String
  userId     String?
  sessionId  String?
  properties Json?
  timestamp  DateTime @default(now())
  
  @@index([eventType])
  @@index([timestamp])
  @@index([userId])
}

model Experiment {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  status      ExperimentStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@index([status])
  @@index([startDate])
}

enum ExperimentStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}
