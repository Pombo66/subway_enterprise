generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String   @default("STAFF")
  firstName String?
  lastName  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Order[]
}

model Store {
  id             String          @id @default(uuid())
  name           String
  country        String?
  region         String?
  city           String?
  latitude       Float?
  longitude      Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  MenuItems      MenuItem[]
  Orders         Order[]
  PriceOverrides PriceOverride[]

  @@index([country])
  @@index([region])
  @@index([city])
  @@index([latitude, longitude])
}

model MenuItem {
  id             String               @id @default(cuid())
  storeId        String
  name           String
  price          Decimal
  basePrice      Decimal?
  active         Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  Store          Store                @relation(fields: [storeId], references: [id])
  modifiers      MenuItemModifier[]
  categories     MenuItemCategory[]
  PriceOverrides PriceOverride[]

  @@index([storeId, active, createdAt])
  @@index([active, updatedAt])
  @@index([name])
  @@index([storeId, price])
}

model Order {
  id        String   @id @default(cuid())
  storeId   String
  userId    String?
  total     Decimal
  status    String   @default("PAID")
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  Store     Store    @relation(fields: [storeId], references: [id])

  @@index([storeId, createdAt])
  @@index([status, createdAt])
  @@index([userId, createdAt])
  @@index([createdAt])
}

model ModifierGroup {
  id           String             @id @default(cuid())
  name         String
  description  String?
  minSelection Int                @default(0)
  maxSelection Int?
  required     Boolean            @default(false)
  active       Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  menuItems    MenuItemModifier[]
  modifiers    Modifier[]

  @@index([active])
}

model MenuItemModifier {
  id              String        @id @default(cuid())
  menuItemId      String
  modifierGroupId String
  createdAt       DateTime      @default(now())
  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, modifierGroupId])
  @@index([menuItemId])
  @@index([modifierGroupId])
}

model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique
  enabled     Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([enabled])
}

model TelemetryEvent {
  id         String   @id @default(cuid())
  eventType  String
  userId     String?
  sessionId  String?
  properties String?
  timestamp  DateTime @default(now())

  @@index([eventType])
  @@index([timestamp])
  @@index([userId])
}

model Experiment {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  status      String    @default("DRAFT")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([startDate])
}

model Category {
  id          String             @id @default(cuid())
  name        String
  description String?
  sortOrder   Int                @default(0)
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  items       MenuItemCategory[]

  @@index([active, sortOrder])
}

model MenuItemCategory {
  id         String   @id @default(cuid())
  menuItemId String
  categoryId String
  createdAt  DateTime @default(now())
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, categoryId])
  @@index([menuItemId])
  @@index([categoryId])
}

model Modifier {
  id              String        @id @default(cuid())
  modifierGroupId String
  name            String
  priceAdjustment Decimal       @default(0)
  active          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)

  @@index([modifierGroupId, active])
}

model PriceOverride {
  id            String    @id @default(cuid())
  storeId       String
  menuItemId    String
  price         Decimal
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  menuItem      MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([storeId, menuItemId, effectiveFrom])
  @@index([storeId])
  @@index([menuItemId])
  @@index([effectiveFrom])
}

model AuditEntry {
  id        String   @id @default(cuid())
  actor     String
  entity    String
  entityId  String
  action    String
  diff      String?
  timestamp DateTime @default(now())

  @@index([entity, entityId])
  @@index([timestamp])
  @@index([actor])
}
